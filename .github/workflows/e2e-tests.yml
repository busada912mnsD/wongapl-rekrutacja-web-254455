name: E2E Tests

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  run-e2e-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_MAIN_APP_PROJECT_NAME: wongapl-rekrutacja-web-254455

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Get Main App Preview URL from Cloudflare Pages
        id: get_app_url
        if: github.event_name == 'pull_request'
        run: |
          npm install -g wrangler

          echo "Sprawdzanie dostępności jq..."
          if ! command -v jq &> /dev/null
          then
              echo "jq nie znaleziono, instaluję jq..."
              sudo apt-get update
              sudo apt-get install -y jq
          fi

          PROJECT_ID=$(wrangler pages project get ${{ env.CLOUDFLARE_MAIN_APP_PROJECT_NAME }} --json | jq -r '.result.id')
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::Nie znaleziono ID projektu Cloudflare Pages dla ${{ env.CLOUDFLARE_MAIN_APP_PROJECT_NAME }}"
            exit 1
          fi

          echo "Oczekiwanie na gotowość wdrożenia głównej aplikacji..."
          ATTEMPTS=0
          MAX_ATTEMPTS=20
          SLEEP_TIME=15
          DEPLOYMENT_URL=""

          while [ -z "$DEPLOYMENT_URL" ] && [ "$ATTEMPTS" -lt "$MAX_ATTEMPTS" ]; do
            ATTEMPTS=$((ATTEMPTS+1))
            echo "Próba $ATTEMPTS z $MAX_ATTEMPTS..."

            DEPLOYMENTS_JSON=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ env.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ env.CLOUDFLARE_MAIN_APP_PROJECT_NAME }}/deployments?branch=${{ github.head_ref }}" \
              -H "Authorization: Bearer ${{ env.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type:application/json")
            
            DEPLOYMENT_INFO=$(echo "$DEPLOYMENTS_JSON" | jq -r --arg commit_hash "${{ github.sha }}" '.result[] | select(.deployment_trigger.metadata.commit_hash == $commit_hash) | select(.latest_stage.status == "success") | .url')

            if [ -n "$DEPLOYMENT_INFO" ]; then
              DEPLOYMENT_URL=$DEPLOYMENT_INFO
              echo "Znaleziono URL wdrożenia głównej aplikacji: $DEPLOYMENT_URL"
            else
              echo "Wdrożenie nie jest jeszcze gotowe dla commita ${{ github.sha }} na gałęzi ${{ github.head_ref }}. Oczekiwanie ${SLEEP_TIME} sekund..."
              sleep "$SLEEP_TIME"
            fi
          done

          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "::error::Upłynął czas oczekiwania na gotowość wdrożenia głównej aplikacji."
            exit 1
          fi

          echo "app_preview_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Debug Main App URL
        run: echo "Main App Preview URL: ${{ steps.get_app_url.outputs.app_preview_url }}"
        if: github.event_name == 'pull_request'

      - name: Run Playwright tests
        run: npx playwright test --workers=3
        env:
          BASE_URL: ${{ steps.get_app_url.outputs.app_preview_url }}

      - name: Upload Playwright test results (HTML Report)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 5

      - name: Publish Playwright Report to Cloudflare Pages (e2e project)
        id: deploy_report
        if: github.event_name == 'pull_request'
        run: |
          npm install -g wrangler
          DEPLOY_OUTPUT=$(wrangler pages deploy playwright-report --project-name wongapl-rekrutacja-web-254455-e2e --branch ${{ github.head_ref }} --commit-hash ${{ github.sha }})
          REPORT_URL=$(echo "$DEPLOY_OUTPUT" | awk '/Deployment complete! Take a peek over at/ {print $NF}')
          echo "deployment_url=$REPORT_URL" >> $GITHUB_OUTPUT

      - name: Get Playwright Test Summary
        id: get_summary
        if: github.event_name == 'pull_request'
        run: |
          if grep -q "failed" playwright-report/index.html; then
            echo "TEST_STATUS=FAILED" >> $GITHUB_OUTPUT
          else
            echo "TEST_STATUS=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Comment on Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const status = process.env.TEST_STATUS;
            const reportUrl = process.env.REPORT_DEPLOY_URL; 
            const appPreviewUrl = process.env.APP_PREVIEW_URL; 
            
            let commentBody = `### E2E Test Report\n\n`;
            if (status === 'PASSED') {
              commentBody += `✅ Wszystkie testy E2E zakończone sukcesem! 🎉\n`;
            } else {
              commentBody += `❌ Testy E2E nie powiodły się. Sprawdź raport, aby uzyskać szczegóły. 🚨\n`;
            }
            if (appPreviewUrl) { 
              commentBody += `\n**[Zobacz podgląd aplikacji](${appPreviewUrl})**\n`;
            }
            commentBody += `\n**[Zobacz pełny raport Playwright](${reportUrl})**\n\n`;
            commentBody += `_Ostatnia aktualizacja: ${new Date().toLocaleString()}_`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' && comment.body.includes('E2E Test Report')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: false
          user-agent: actions/github-script
          result-encoding: json
          retries: 0
          retry-exempt-status-codes: 400,401,403,404,422
        env:
          TEST_STATUS: ${{ steps.get_summary.outputs.TEST_STATUS }}
          REPORT_DEPLOY_URL: ${{ steps.deploy_report.outputs.deployment_url }}
          APP_PREVIEW_URL: ${{ steps.get_app_url.outputs.app_preview_url }}
