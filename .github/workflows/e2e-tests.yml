name: E2E Tests (Preview URL check)

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  # push:
  #   branches:
  #     - main

jobs:
  run-e2e-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_MAIN_APP_PROJECT_NAME: wongapl-rekrutacja-web-254455

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # - name: Cache Node.js modules
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      # - name: Install dependencies
      #   run: npm install --legacy-peer-deps

      # - name: Cache Playwright browsers
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-playwright-

      # - name: Install Playwright browsers
      #   run: npx playwright install --with-deps

      - name: Get Main App Preview URL from Cloudflare Pages
        id: get_app_url
        if: github.event_name == 'pull_request'
        env:
          SOURCE_COMMIT: ${{ github.event.pull_request.head.sha }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          set -euo pipefail

          if ! command -v jq &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

          npm install -g wrangler@latest

          if ! command -v wrangler &> /dev/null; then
            echo "::error::Wrangler is not found in PATH after installation."
            exit 1
          fi

          # Weryfikacja, czy Wrangler Pages działa poprawnie i zwraca dane
          # Wyłączono stdout dla list, aby nie zaśmiecać logów
          PROJECTS_JSON=$(npx wrangler pages project list --json 2>/dev/null || npx wrangler pages list --json 2>/dev/null)
          if [ -z "$PROJECTS_JSON" ]; then
            echo "::error::Nie udało się pobrać listy projektów Cloudflare Pages. Sprawdź token API i uprawnienia."
            exit 1
          fi

          PROJECT_ID=$(echo "$PROJECTS_JSON" | jq -r --arg PROJECT_NAME "$CLOUDFLARE_MAIN_APP_PROJECT_NAME" '.[] | select(.name == $PROJECT_NAME) | .id')
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::Nie znaleziono ID projektu Cloudflare Pages dla $CLOUDFLARE_MAIN_APP_PROJECT_NAME. Sprawdź nazwę projektu."
            exit 1
          fi
          echo "Znaleziono ID projektu: $PROJECT_ID"

          ATTEMPTS=0
          MAX_ATTEMPTS=30 # Zwiększono liczbę prób (5 minut)
          SLEEP_TIME=10   # Oczekiwanie 10 sekund między próbami
          DEPLOYMENT_URL=""

          echo "Oczekiwanie na gotowość wdrożenia Preview dla commita $SOURCE_COMMIT na gałęzi $GITHUB_HEAD_REF..."
          while [ -z "$DEPLOYMENT_URL" ] && [ "$ATTEMPTS" -lt "$MAX_ATTEMPTS" ]; do
            ATTEMPTS=$((ATTEMPTS+1))
            echo "--- Próba $ATTEMPTS z $MAX_ATTEMPTS (pozostało ~ $(( (MAX_ATTEMPTS - ATTEMPTS) * SLEEP_TIME )) sekund) ---"

            # Pobieranie deploymentów
            DEPLOYMENTS_JSON=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$CLOUDFLARE_MAIN_APP_PROJECT_NAME/deployments" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json")
            
            if ! echo "$DEPLOYMENTS_JSON" | jq -e '.success' >/dev/null 2>&1; then
              echo "::warning::Nieprawidłowa odpowiedź z API Cloudflare lub błąd w API (np. token)."
              echo "Odpowiedź API: $DEPLOYMENTS_JSON"
              sleep "$SLEEP_TIME"
              continue
            fi
            
            echo "Dostępne wdrożenia dla gałęzi $GITHUB_HEAD_REF i commita $SOURCE_COMMIT:"
            # Wypisujemy statusy i URL-e dla wszystkich pasujących deploymentów, aby debugować
            echo "$DEPLOYMENTS_JSON" | jq -r --arg commit_hash "$SOURCE_COMMIT" --arg branch "$GITHUB_HEAD_REF" \
              '.result[] | select(.deployment_trigger.metadata.commit_hash == $commit_hash) | select(.deployment_trigger.metadata.branch == $branch) | "\(.id) - \(.deployment_trigger.metadata.commit_hash) - \(.deployment_trigger.metadata.branch) - Status: \(.latest_stage.status) - URL: \(.url)"' || true

            # Szukamy konkretnego deploymentu, który zakończył się sukcesem
            DEPLOYMENT_INFO=$(echo "$DEPLOYMENTS_JSON" | jq -r --arg commit_hash "$SOURCE_COMMIT" --arg branch "$GITHUB_HEAD_REF" \
              '.result[] | select(.deployment_trigger.metadata.commit_hash == $commit_hash) | select(.deployment_trigger.metadata.branch == $branch) | select(.latest_stage.status == "success") | .url')

            if [ -n "$DEPLOYMENT_INFO" ]; then
              DEPLOYMENT_URL=$DEPLOYMENT_INFO
              echo "Znaleziono gotowy URL wdrożenia głównej aplikacji: $DEPLOYMENT_URL"
            else
              echo "Wdrożenie dla commita $SOURCE_COMMIT na gałęzi $GITHUB_HEAD_REF nie jest jeszcze gotowe (oczekiwany status: success). Oczekiwanie ${SLEEP_TIME} sekund przed kolejną próbą..."
              sleep "$SLEEP_TIME"
            fi
          done

          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "::error::Upłynął czas oczekiwania na gotowość wdrożenia głównej aplikacji Cloudflare Pages. Sprawdź logi budowania Cloudflare Pages, aby zdiagnozować problem (np. błąd TinaCMS)."
            exit 1
          fi

          echo "app_preview_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Debug Main App URL
        run: |
          echo "Main App Preview URL: ${{ steps.get_app_url.outputs.app_preview_url }}"
          echo "Source Commit: ${{ env.SOURCE_COMMIT }}"
          echo "Head Ref: ${{ env.GITHUB_HEAD_REF }}"
        if: github.event_name == 'pull_request'

      # - name: Run Playwright tests
      #   run: npx playwright test --workers=3
      #   env:
      #     BASE_URL: ${{ steps.get_app_url.outputs.app_preview_url }}

      # - name: Upload Playwright test results (HTML Report)
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: playwright-report
      #     path: playwright-report/
      #     retention-days: 5

      # - name: Publish Playwright Report to Cloudflare Pages (e2e project)
      #   id: deploy_report
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     DEPLOY_JSON=$(npx wrangler pages deploy playwright-report \
      #       --project-name wongapl-rekrutacja-web-254455-e2e \
      #       --branch ${{ github.head_ref }} \
      #       --commit-hash ${{ github.sha }} \
      #       --json)

      #     REPORT_URL=$(echo "$DEPLOY_JSON" | jq -r '.url')
      #     if [ -z "$REPORT_URL" ]; then
      #       echo "::error::Błąd podczas publikacji raportu"
      #       exit 1
      #     fi

      #     echo "deployment_url=$REPORT_URL" >> $GITHUB_OUTPUT

      # - name: Get Playwright Test Summary
      #   id: get_summary
      #   if: always() && github.event_name == 'pull_request'
      #   run: |
      #     if [ -f "test-results.json" ]; then
      #       status=$(jq -r '[.suites[].specs[].tests[].results[].status] | if any(. == "failed") then "FAILED" else "PASSED" end' test-results.json)
      #     else
      #       status="ERROR: Brak wyników"
      #     fi
      #     echo "TEST_STATUS=$status" >> $GITHUB_OUTPUT

      # - name: Comment on Pull Request
      #   uses: actions/github-script@v7
      #   if: github.event_name == 'pull_request'
      #   with:
      #     script: |
      #       const status = process.env.TEST_STATUS;
      #       const reportUrl = process.env.REPORT_DEPLOY_URL;
      #       const appPreviewUrl = process.env.APP_PREVIEW_URL;

      #       let commentBody = '### E2E Test Report\n\n';
      #       commentBody += status.includes("PASSED")
      #         ? '✅ **WSZYSTKIE TESTY ZALICZONE**\n'
      #         : '❌ **WYKRYTO BŁĘDY W TESTACH**\n';

      #       if (appPreviewUrl) {
      #         commentBody += `🔹 [Podgląd aplikacji](${appPreviewUrl})\n`;
      #       }

      #       if (reportUrl) {
      #         commentBody += `📊 [Pełny raport testów](${reportUrl})\n`;
      #       }

      #       commentBody += `\n_Ostatnia aktualizacja: ${new Date().toLocaleString()}_`;

      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });

      #       const existingComment = comments.find(comment =>
      #         comment.user.login === 'github-actions[bot]' && comment.body.includes('E2E Test Report')
      #       );

      #       if (existingComment) {
      #         await github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: existingComment.id,
      #           body: commentBody,
      #         });
      #       } else {
      #         await github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: commentBody,
      #         });
      #       }
      # github-token: ${{ secrets.GITHUB_TOKEN }}
      # env:
      #   TEST_STATUS: ${{ steps.get_summary.outputs.TEST_STATUS }}
      #   REPORT_DEPLOY_URL: ${{ steps.deploy_report.outputs.deployment_url }}
      #   APP_PREVIEW_URL: ${{ steps.get_app_url.outputs.app_preview_url }}
